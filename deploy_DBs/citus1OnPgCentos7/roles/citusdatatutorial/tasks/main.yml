---

# To execute this yml file
#   change directory to centos7vm/deploy_DBs//{{ os_user_for_citus_tutorial }}/OnPgCentos7
#   and command to execute:
#     ansible-playbook -i citus1_tutorial_hosts citus1_tutorial_playbook.yml

# ---~~~~~~*****~~~~~~---
#
# Lesson learnt:
#   Whenever there is a requirement to add text (lines) to a file, you have to use 'shell' module and not 'command' module:
#
# ---~~~~~~*****~~~~~~---

- name: Adding my usual alias shortcuts to .bash_profile of {{ os_user_for_citus_tutorial }} user
  lineinfile:
    dest=/home/{{ os_user_for_citus_tutorial }}/.bash_profile
    line="alias {{item.alias}}='{{item.command}}'"
  with_items:
    - {alias: l, command: 'ls -ltrh'}
    - {alias: eb, command: 'vi ~/.bash_profile'}

- name: Create the required directories in the home folder for user {{ os_user_for_citus_tutorial }}
  file: path={{ item }}
        state=directory
        mode=0755
        owner={{ os_user_for_citus_tutorial }}
        group={{ os_user_for_citus_tutorial }}
  with_items:
    - /home/{{ os_user_for_citus_tutorial }}/'citus-tutorial'
    - /home/{{ os_user_for_citus_tutorial }}/'data'
    - /home/{{ os_user_for_citus_tutorial }}/'scripts'

- name: This is to register existance of the citus-tutorial tar file, else it will help to download the same
  stat: path=/home/{{ os_user_for_citus_tutorial }}/citus-tutorial/{{ citus_tutorial_file }}.tar
  register: p

- name: Download archive 
  get_url: url={{ citus_tutorial_url }}
        mode=0775
        owner={{ os_user_for_citus_tutorial }}
        dest=/home/{{ os_user_for_citus_tutorial }}/citus-tutorial
        timeout=10
        force=no
  when: p.stat.exists == False
  tags: downloadcitustutorial

# Strange thing what I have faced here is, in the previous command get_url, I have used options to set Owner and Group
#   Yet the next command to gunzip was failing, initially I did not realize the problem, later through option -vvvv
#   I found that it was complaining about group not being right, here is the exact message:
#           msg: chgrp failed: failed to look up group {{ os_user_for_citus_tutorial }}
#   So, thats why I have this next few lines to just set the group properly, and then gunzip started working fine.
#  Supposedly there is a module named 'unarchive' which should download and unarchive on its own, but did not work for me.

- name: Change the file group info for the downloaded gz file
  file: path=/home/{{ os_user_for_citus_tutorial }}/citus-tutorial/{{ citus_tutorial_file }}.tar.gz
        owner={{ os_user_for_citus_tutorial }}
        group={{ os_user_for_citus_tutorial }} 
  when: p.stat.exists == False
  tags: changegroupoftutorialfile

- name: Gunzip the tutorial package 
  command: gunzip -f /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/{{ citus_tutorial_file }}.tar.gz
  when: p.stat.exists == False

- name: Untar the tutorial package 
  command: tar -xvf /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/{{ citus_tutorial_file }}.tar
  when: p.stat.exists == False

- name: Checking existance of Master database directory
  stat: path=/home/{{ os_user_for_citus_tutorial }}/data/master
  register: r

# Read in the documentation that initdb would create all the necessary postgres database objects in a template1 form
#   This is essentinally done to create a cluster.
#   The template will have everything that will be created later when you use a 'createdb' command.

- name: initdb for master database  
  command: /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/bin/initdb -D data/master 
  when: r.stat.exists == False

- name: Checking existance of Worker database directory
  stat: path=/home/{{ os_user_for_citus_tutorial }}/data/worker
  register: s

- name: initdb for worker database  
  command: /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/bin/initdb -D data/worker
  when: s.stat.exists == False

- name: "The master needs to know where it can find the worker . If this file does not exist create it"
  lineinfile: >
    dest=/home/{{ os_user_for_citus_tutorial }}/data/master/pg_worker_list.conf
    line="localhost {{ citus_worker_db_port }}"
    state=present
    create=yes

- name: "Citus is a Postgres extension. To tell Postgres to use this extension, you’ll need to add it to a configuration variable called shared_preload_libraries"
  lineinfile: >
    dest=/home/{{ os_user_for_citus_tutorial }}/data/master/postgresql.conf
    insertafter='^#shared_preload_libraries'
    line="shared_preload_libraries = 'citus'"
    state=present
    create=yes

# name: I tried to remove the fullstop or the comma or the apostrophe but it wouldn't work, finally I just had to wrap
#   the whole thing in double quotes.

- name: "Citus is a Postgres extension. To tell Postgres to use this extension, you’ll need to add it to a configuration variable called shared_preload_libraries"
  lineinfile: >
    dest=/home/{{ os_user_for_citus_tutorial }}/data/worker/postgresql.conf
    insertafter='^#shared_preload_libraries'
    line="shared_preload_libraries = 'citus'"
    state=present
    create=yes

# So far what I have found is, when you start the database through pg_ctl you can find the postmaster.pid created in the
#   data/master folder, with the details of the process started.
#   When you stop the same through pg_ctl again, you will see the postmaster.pid gone.
#   That way, now I am sure that it is the right thing to do to look for the existance of the file postmaster.pid
#     to work with starting or stopping the database service. (I am not sure if I can call it that)
#     remember so far I have not run the 'createdb'

- name: Checking existance of Worker database directory
  stat: path=/home/{{ os_user_for_citus_tutorial }}/data/master/postmaster.pid
  register: t

- name: Let’s start the Master database
  command: /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/bin/pg_ctl -D /home/{{ os_user_for_citus_tutorial }}/data/master -o "-p {{ citus_master_db_port }}" -l /home/{{ os_user_for_citus_tutorial }}/data/master/master_logfile start
  when: t.stat.exists == False

- name: Checking existance of Worker database directory
  stat: path=/home/{{ os_user_for_citus_tutorial }}/data/worker/postmaster.pid
  register: u

- name: Let’s start the Master database
  command: /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/bin/pg_ctl -D /home/{{ os_user_for_citus_tutorial }}/data/worker -o "-p {{ citus_worker_db_port }}" -l /home/{{ os_user_for_citus_tutorial }}/data/worker/worker_logfile start
  when: u.stat.exists == False

# Found some very good info on this website: http://stackoverflow.com/questions/14549270/check-if-database-exists-in-postgresql-using-shell
# In there he explains it very well on how to check programatically if a database exists
# ~/citus-tutorial/bin/psql -l -p {{ citus_master_db_port }}
#   returns information about the databases on the system
# ~/citus-tutorial/bin/psql -lt -p {{ citus_master_db_port }}
#   removes the header
# The next bit, cut -d \| -f 1 splits the output by the vertical pipe | character (escaped from the shell with a backslash), and selects field 1
# Now pipe it all to grep for the db name you are looking for

# Also I am putting the output of the entire commmand to a variable
# Use a if statement to evaluate the variable content
# And echo success or failure accordingly
# Register the output
# Finally to be able to use it successfully, capture the exit code of the command

- name: Capturing information to find out if Master database is created already
  shell: chk=`/home/{{ os_user_for_citus_tutorial }}/citus-tutorial/bin/psql -lt -p {{ citus_master_db_port }} | cut -d \| -f 1 | grep "{{ os_user_for_citus_tutorial }}"`; if [ $chk == "{{ os_user_for_citus_tutorial }}" ]; then echo "0"; else echo "1"; fi
  register: v

# Following is how we can printout the content of a variable
#- debug: var=v.stdout

- name: Createdb for Master database, if it is not already created
  command: /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/bin/createdb -p {{ citus_master_db_port }} {{ lookup('env', 'whoami') }}
  when: v.stdout == "1"

- name: Capturing information to find out if Worker database is created already
  shell: chk=`/home/{{ os_user_for_citus_tutorial }}/citus-tutorial/bin/psql -lt -p {{ citus_worker_db_port }} | cut -d \| -f 1 | grep "{{ os_user_for_citus_tutorial }}"`; if [ $chk == "{{ os_user_for_citus_tutorial }}" ]; then echo "0"; else echo "1"; fi
  register: w

- name: Createdb for Worker database, if it is not already created
  command: /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/bin/createdb -p {{ citus_worker_db_port }} {{ lookup('env', 'whoami') }}
  when: w.stdout == "1"

- name: Copy over the scripts onto the vm, for later use
  copy: src={{ item }}
        dest=/home/{{ os_user_for_citus_tutorial }}/scripts
        owner={{ os_user_for_citus_tutorial }}
        group={{ os_user_for_citus_tutorial }}
        mode=750
  with_items:
    - checkPgCitusExtInstalled.sh
    - create2wikipediaTbls.sql

- name: "Check to see if citus extension is installed on the Master database"
  command: /home/{{ os_user_for_citus_tutorial }}/scripts/checkPgCitusExtInstalled.sh {{ citus_master_db_port }}
  register: x

- name: Install citus extension on the Master database if it is not already installed.
  command: /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/bin/psql -p {{ citus_master_db_port }} -c "CREATE EXTENSION citus;" 
  when: x.stdout == "1" 

- name: Check to see if citus extension is installed on the Worker database
  command: /home/{{ os_user_for_citus_tutorial }}/scripts/checkPgCitusExtInstalled.sh {{ citus_worker_db_port }}
  register: y

# Just want to make a note here that, to test the execution of this next task of creating extension
#   I manually dropped the created extension to check if the When clause works as expected.
#   The command was:
#       /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/bin/psql -t -p {{ citus_master_db_port }} -c "drop extension citus"

- name: Install citus extension on the Worker database if it is not already installed.
  command: /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/bin/psql -p {{ citus_worker_db_port }} -c "CREATE EXTENSION citus;" 
  when: y.stdout == "1" 

- name: As part of the tutorial, we will be creating 2 new tables, before that, let us check if they already exist
  shell: /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/bin/psql -t -p 9700 -c "select count(*) from information_schema.tables where table_name = 'wikipedia_editors'"
  register: z

#- debug: var=z.stdout

- name: Create the 2 tables based on the check performed above
  command: /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/bin/psql -p 9700 -f /home/{{ os_user_for_citus_tutorial }}/scripts/create2wikipediaTbls.sql
  when: z.stdout == "0"

- name: Run the data ingest script, provided by citusdata, this collects information at runtime from wikipedia of the ongoing edits
  command: /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/bin/psql -p 9700 -f /home/{{ os_user_for_citus_tutorial }}/citus-tutorial/scripts/collect-wikipedia-user-data
  when: z.stdout == "1"

