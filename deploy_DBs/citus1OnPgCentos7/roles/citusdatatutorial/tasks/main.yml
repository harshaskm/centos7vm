---

# To execute this yml file
#   change directory to centos7vm/deploy_DBs/citus1OnPgCentos7
#   and command to execute:
#     ansible-playbook -i citus1_tutorial_hosts citus1_tutorial_playbook.yml

# ---~~~~~~*****~~~~~~---
#
# Lesson learnt:
#   Whenever there is a requirement to add text (lines) to a file, you have to use 'shell' module and not 'command' module:
#
# ---~~~~~~*****~~~~~~---

- name: Add alias 'l' to .bash_profile for citus1
  shell: echo alias l="'ls -ltrh'" >> ~/.bash_profile

- name: Add alias 'eb' to .bash_profile for citus1
  shell: echo alias eb="'vi ~/.bash_profile'" >> ~/.bash_profile

- name: create a citus-tutorial directory if it doesn't exist 
  file: path=/home/citus1/citus-tutorial state=directory
        mode=0755
        owner=citus1
        group=citus1

- name: create a data directory if it doesn't exist 
  file: path=/home/citus1/data state=directory
        mode=0755
        owner=citus1
        group=citus1

- name: create a scripts directory if it doesn't exist 
  file: path=/home/citus1/scripts state=directory
        mode=0755
        owner=citus1
        group=citus1

- name: This is to register existance of the citus-tutorial tar file, else it will help to download the same
  stat: path=/home/citus1/citus-tutorial/citus-tutorial-linux-1.1.0.tar
  register: p

- name: Download archive 
  get_url: url=https://packages.citusdata.com/tutorials/citus-tutorial-linux-1.1.0.tar.gz
        mode=0775
        owner=citus1
        dest=/home/citus1/citus-tutorial
        timeout=10
        force=no
  when: p.stat.exists == False
  tags: downloadcitustutorial

- name: This is to register existance of the citus-tutorial zip file
  stat: path=/home/citus1/citus-tutorial/citus-tutorial-linux-1.1.0.tar.gz
  register: q

# Strange thing what I have faced here is, in the previous command get_url, I have used options to set Owner and Group
#   Yet the next command to gunzip was failing, initially I did not realize the problem, later through option -vvvv
#   I found that it was complaining about group not being right, here is the exact message:
#           msg: chgrp failed: failed to look up group citus1
#   So, thats why I have this next few lines to just set the group properly, and then gunzip started working fine.
#  Supposedly there is a module named 'unarchive' which should download and unarchive on its own, but did not work for me.

- name: Change the file group info for the downloaded gz file
  file: path=/home/citus1/citus-tutorial/citus-tutorial-linux-1.1.0.tar.gz
        owner=citus1
        group=citus1 
  when: q.stat.exists == True
  tags: changegroupoftutorialfile

- name: Gunzip the tutorial package 
  command: gunzip -f /home/citus1/citus-tutorial/citus-tutorial-linux-1.1.0.tar.gz
  when: q.stat.exists == True

- name: Untar the tutorial package 
  command: tar -xvf /home/citus1/citus-tutorial/citus-tutorial-linux-1.1.0.tar
  when: p.stat.exists == False

- name: Checking existance of Master database directory
  stat: path=/home/citus1/data/master
  register: r

# Read in the documentation that initdb would create all the necessary postgres database objects in a template1 form
#   This is essentinally done to create a cluster.
#   The template will have everything that will be created later when you use a 'createdb' command.

- name: initdb for master database  
  command: /home/citus1/citus-tutorial/bin/initdb -D data/master 
  when: r.stat.exists == False

- name: Checking existance of Worker database directory
  stat: path=/home/citus1/data/worker
  register: s

- name: initdb for worker database  
  command: /home/citus1/citus-tutorial/bin/initdb -D data/worker
  when: s.stat.exists == False

- name: "The master needs to know where it can find the worker . If this file does not exist create it"
  lineinfile: >
    dest=/home/citus1/data/master/pg_worker_list.conf
    line="localhost 9701"
    state=present
    create=yes

- name: "Citus is a Postgres extension. To tell Postgres to use this extension, you’ll need to add it to a configuration variable called shared_preload_libraries"
  lineinfile: >
    dest=/home/citus1/data/master/postgresql.conf
    insertafter='^#shared_preload_libraries'
    line="shared_preload_libraries = 'citus'"
    state=present
    create=yes

# name: I tried to remove the fullstop or the comma or the apostrophe but it wouldn't work, finally I just had to wrap
#   the whole thing in double quotes.

- name: "Citus is a Postgres extension. To tell Postgres to use this extension, you’ll need to add it to a configuration variable called shared_preload_libraries"
  lineinfile: >
    dest=/home/citus1/data/worker/postgresql.conf
    insertafter='^#shared_preload_libraries'
    line="shared_preload_libraries = 'citus'"
    state=present
    create=yes

# So far what I have found is, when you start the database through pg_ctl you can find the postmaster.pid created in the
#   data/master folder, with the details of the process started.
#   When you stop the same through pg_ctl again, you will see the postmaster.pid gone.
#   That way, now I am sure that it is the right thing to do to look for the existance of the file postmaster.pid
#     to work with starting or stopping the database service. (I am not sure if I can call it that)
#     remember so far I have not run the 'createdb'

- name: Checking existance of Worker database directory
  stat: path=/home/citus1/data/master/postmaster.pid
  register: t

- name: Let’s start the Master database
  command: /home/citus1/citus-tutorial/bin/pg_ctl -D /home/citus1/data/master -o "-p 9700" -l /home/citus1/data/master/master_logfile start
  when: t.stat.exists == False

- name: Checking existance of Worker database directory
  stat: path=/home/citus1/data/worker/postmaster.pid
  register: u

- name: Let’s start the Master database
  command: /home/citus1/citus-tutorial/bin/pg_ctl -D /home/citus1/data/worker -o "-p 9701" -l /home/citus1/data/worker/worker_logfile start
  when: u.stat.exists == False

# Found some very good info on this website: http://stackoverflow.com/questions/14549270/check-if-database-exists-in-postgresql-using-shell
# In there he explains it very well on how to check programatically if a database exists
# ~/citus-tutorial/bin/psql -l -p 9700
#   returns information about the databases on the system
# ~/citus-tutorial/bin/psql -lt -p 9700
#   removes the header
# The next bit, cut -d \| -f 1 splits the output by the vertical pipe | character (escaped from the shell with a backslash), and selects field 1
# Now pipe it all to grep for the db name you are looking for

# Also I am putting the output of the entire commmand to a variable
# Use a if statement to evaluate the variable content
# And echo success or failure accordingly
# Register the output
# Finally to be able to use it successfully, capture the exit code of the command

- name: Capturing information to find out if Master database is created already
  shell: chk=`~/citus-tutorial/bin/psql -lt -p 9700 | cut -d \| -f 1 | grep "citus1"`; if [ $chk == "citus1" ]; then echo "0"; else echo "1"; fi
  register: v

# Following is how we can printout the content of a variable
#- debug: var=v.stdout

- name: Createdb for Master database, if it is not already created
  command: /home/citus1/citus-tutorial/bin/createdb -p 9700 {{ lookup('env', 'whoami') }}
  when: v.stdout == "1"

- name: Capturing information to find out if Worker database is created already
  shell: chk=`~/citus-tutorial/bin/psql -lt -p 9701 | cut -d \| -f 1 | grep "citus1"`; if [ $chk == "citus1" ]; then echo "0"; else echo "1"; fi
  register: w

- name: Createdb for Worker database, if it is not already created
  command: /home/citus1/citus-tutorial/bin/createdb -p 9701 {{ lookup('env', 'whoami') }}
  when: w.stdout == "1"





